/*
Copyright (C) 2016  The AlterPCB team
Contact: Maarten Baert <maarten-baert@hotmail.com>

This file is part of AlterPCB.

AlterPCB is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

AlterPCB is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this AlterPCB.  If not, see <http://www.gnu.org/licenses/>.
*/

#include "Decimal.h"

#include "MiscMath.h"

#include <limits>

/*
This file implements the hard mathematical part of float-to-string and string-to-float conversions. The remaining work
is just basic string processing. Some implementations (e.g. the standard library) try to produce results that are
mathematically perfect, which means that the result can never be off by more than 0.5 ULP. Unfortunately this sometimes
requires precision far beyond what can be achieved with regular 64-bit integers, so arbitrary-precision arithmetic
libraries must be used. This makes the conversion quite slow, and is not actually necessary in most use cases.

Our goal is simply to make the result satisfy the 'roundtrip' requirement: when a double is converted to a string and
then back to a double, the value should not change (excluding special cases like inf and nan). So the output of this
algorithm won't necessarily match the output of the standard implementation exactly, but it's accurate enough to ensure
that the number can be converted back to its original value.

Some implementations (e.g. Grisu2) like to 'fudge' the result to make the resulting string shorter, at the expense of
some accuracy. For example, the value '0.1' can't be represented exactly as a double. The closest representable value
is 7205759403792794 / 2**56 which is approximately 0.100000000000000005551. The typical string-to-float implementation
would round this to '0.10000000000000001' when 17 decimals are requested, since this is the closest 17-decimal value.
However implementations like Grisu2 will print '0.1' instead, because this is shorter and it will still convert back to
the correct value. Unfortunately this trick creates some problems: it only works under the assumption that both the
float-to-string and string-to-float conversions are free of rounding errors. This again requires arbitrary-precision
arithmetic which is exactly what we want to avoid. So don't try to use this trick with this implementation, because it
will occasionally result in small rounding errors.

A precision of 17 or higher is sufficient to satisfy the 'roundtrip' requirement, which ensures that no data is lost.
If you want to get rid of results like '0.10000000000000001' and '0.29999999999999999', you can do this by limiting the
precision. A precision of 15 or lower is guaranteed to eliminate these results.

Examples:

input: 5.1178299553596525e+24 (0x4510eef878a0b98b)
previous value:    5117829955359651376660480
exact value:       5117829955359652450402304
next value:        5117829955359653524144128
standard library:  5117829955359652500000000
my implementation: 5117829955359652400000000

input: 8.4887616353662058e+19 (0x44126835954776ab)
previous value:    84887616353662042112
exact value:       84887616353662058496
next value:        84887616353662074880
standard library:  84887616353662058000
my implementation: 84887616353662059000
*/

/*
TODO:
- Find out why we can tolerate +/- 50 LSB errors in ToDecimal instead of the expected +/- 5 LSB (or 10 LSB including expo10 error).
*/

const double FLOAT_ZERO_POS = MemCast<double>(UINT64_C(0x0000000000000000));
const double FLOAT_ZERO_NEG = MemCast<double>(UINT64_C(0x8000000000000000));
const double FLOAT_INF_POS = std::numeric_limits<double>::infinity();
const double FLOAT_INF_NEG = -std::numeric_limits<double>::infinity();
const double FLOAT_NAN = std::numeric_limits<double>::quiet_NaN();

// The following tables were generated by the 'lut-generator-float.py' Python script in the 'misc' directory.

constexpr uint32_t LUT_TODECIMAL_EXPO[616] = {
	0x004, 0x007, 0x00a, 0x00e, 0x011, 0x014, 0x018, 0x01b, 0x01e, 0x022, 0x025, 0x028, 0x02c, 0x02f, 0x032, 0x036,
	0x039, 0x03c, 0x040, 0x043, 0x046, 0x04a, 0x04d, 0x050, 0x054, 0x057, 0x05a, 0x05e, 0x061, 0x064, 0x067, 0x06b,
	0x06e, 0x071, 0x075, 0x078, 0x07b, 0x07f, 0x082, 0x085, 0x089, 0x08c, 0x08f, 0x093, 0x096, 0x099, 0x09d, 0x0a0,
	0x0a3, 0x0a7, 0x0aa, 0x0ad, 0x0b1, 0x0b4, 0x0b7, 0x0bb, 0x0be, 0x0c1, 0x0c4, 0x0c8, 0x0cb, 0x0ce, 0x0d2, 0x0d5,
	0x0d8, 0x0dc, 0x0df, 0x0e2, 0x0e6, 0x0e9, 0x0ec, 0x0f0, 0x0f3, 0x0f6, 0x0fa, 0x0fd, 0x100, 0x104, 0x107, 0x10a,
	0x10e, 0x111, 0x114, 0x118, 0x11b, 0x11e, 0x122, 0x125, 0x128, 0x12b, 0x12f, 0x132, 0x135, 0x139, 0x13c, 0x13f,
	0x143, 0x146, 0x149, 0x14d, 0x150, 0x153, 0x157, 0x15a, 0x15d, 0x161, 0x164, 0x167, 0x16b, 0x16e, 0x171, 0x175,
	0x178, 0x17b, 0x17f, 0x182, 0x185, 0x188, 0x18c, 0x18f, 0x192, 0x196, 0x199, 0x19c, 0x1a0, 0x1a3, 0x1a6, 0x1aa,
	0x1ad, 0x1b0, 0x1b4, 0x1b7, 0x1ba, 0x1be, 0x1c1, 0x1c4, 0x1c8, 0x1cb, 0x1ce, 0x1d2, 0x1d5, 0x1d8, 0x1dc, 0x1df,
	0x1e2, 0x1e6, 0x1e9, 0x1ec, 0x1ef, 0x1f3, 0x1f6, 0x1f9, 0x1fd, 0x200, 0x203, 0x207, 0x20a, 0x20d, 0x211, 0x214,
	0x217, 0x21b, 0x21e, 0x221, 0x225, 0x228, 0x22b, 0x22f, 0x232, 0x235, 0x239, 0x23c, 0x23f, 0x243, 0x246, 0x249,
	0x24c, 0x250, 0x253, 0x256, 0x25a, 0x25d, 0x260, 0x264, 0x267, 0x26a, 0x26e, 0x271, 0x274, 0x278, 0x27b, 0x27e,
	0x282, 0x285, 0x288, 0x28c, 0x28f, 0x292, 0x296, 0x299, 0x29c, 0x2a0, 0x2a3, 0x2a6, 0x2a9, 0x2ad, 0x2b0, 0x2b3,
	0x2b7, 0x2ba, 0x2bd, 0x2c1, 0x2c4, 0x2c7, 0x2cb, 0x2ce, 0x2d1, 0x2d5, 0x2d8, 0x2db, 0x2df, 0x2e2, 0x2e5, 0x2e9,
	0x2ec, 0x2ef, 0x2f3, 0x2f6, 0x2f9, 0x2fd, 0x300, 0x303, 0x307, 0x30a, 0x30d, 0x310, 0x314, 0x317, 0x31a, 0x31e,
	0x321, 0x324, 0x328, 0x32b, 0x32e, 0x332, 0x335, 0x338, 0x33c, 0x33f, 0x342, 0x346, 0x349, 0x34c, 0x350, 0x353,
	0x356, 0x35a, 0x35d, 0x360, 0x364, 0x367, 0x36a, 0x36d, 0x371, 0x374, 0x377, 0x37b, 0x37e, 0x381, 0x385, 0x388,
	0x38b, 0x38f, 0x392, 0x395, 0x399, 0x39c, 0x39f, 0x3a3, 0x3a6, 0x3a9, 0x3ad, 0x3b0, 0x3b3, 0x3b7, 0x3ba, 0x3bd,
	0x3c1, 0x3c4, 0x3c7, 0x3cb, 0x3ce, 0x3d1, 0x3d4, 0x3d8, 0x3db, 0x3de, 0x3e2, 0x3e5, 0x3e8, 0x3ec, 0x3ef, 0x3f2,
	0x3f6, 0x3f9, 0x3fc, 0x400, 0x403, 0x406, 0x40a, 0x40d, 0x410, 0x414, 0x417, 0x41a, 0x41e, 0x421, 0x424, 0x428,
	0x42b, 0x42e, 0x431, 0x435, 0x438, 0x43b, 0x43f, 0x442, 0x445, 0x449, 0x44c, 0x44f, 0x453, 0x456, 0x459, 0x45d,
	0x460, 0x463, 0x467, 0x46a, 0x46d, 0x471, 0x474, 0x477, 0x47b, 0x47e, 0x481, 0x485, 0x488, 0x48b, 0x48e, 0x492,
	0x495, 0x498, 0x49c, 0x49f, 0x4a2, 0x4a6, 0x4a9, 0x4ac, 0x4b0, 0x4b3, 0x4b6, 0x4ba, 0x4bd, 0x4c0, 0x4c4, 0x4c7,
	0x4ca, 0x4ce, 0x4d1, 0x4d4, 0x4d8, 0x4db, 0x4de, 0x4e2, 0x4e5, 0x4e8, 0x4ec, 0x4ef, 0x4f2, 0x4f5, 0x4f9, 0x4fc,
	0x4ff, 0x503, 0x506, 0x509, 0x50d, 0x510, 0x513, 0x517, 0x51a, 0x51d, 0x521, 0x524, 0x527, 0x52b, 0x52e, 0x531,
	0x535, 0x538, 0x53b, 0x53f, 0x542, 0x545, 0x549, 0x54c, 0x54f, 0x552, 0x556, 0x559, 0x55c, 0x560, 0x563, 0x566,
	0x56a, 0x56d, 0x570, 0x574, 0x577, 0x57a, 0x57e, 0x581, 0x584, 0x588, 0x58b, 0x58e, 0x592, 0x595, 0x598, 0x59c,
	0x59f, 0x5a2, 0x5a6, 0x5a9, 0x5ac, 0x5b0, 0x5b3, 0x5b6, 0x5b9, 0x5bd, 0x5c0, 0x5c3, 0x5c7, 0x5ca, 0x5cd, 0x5d1,
	0x5d4, 0x5d7, 0x5db, 0x5de, 0x5e1, 0x5e5, 0x5e8, 0x5eb, 0x5ef, 0x5f2, 0x5f5, 0x5f9, 0x5fc, 0x5ff, 0x603, 0x606,
	0x609, 0x60d, 0x610, 0x613, 0x616, 0x61a, 0x61d, 0x620, 0x624, 0x627, 0x62a, 0x62e, 0x631, 0x634, 0x638, 0x63b,
	0x63e, 0x642, 0x645, 0x648, 0x64c, 0x64f, 0x652, 0x656, 0x659, 0x65c, 0x660, 0x663, 0x666, 0x66a, 0x66d, 0x670,
	0x674, 0x677, 0x67a, 0x67d, 0x681, 0x684, 0x687, 0x68b, 0x68e, 0x691, 0x695, 0x698, 0x69b, 0x69f, 0x6a2, 0x6a5,
	0x6a9, 0x6ac, 0x6af, 0x6b3, 0x6b6, 0x6b9, 0x6bd, 0x6c0, 0x6c3, 0x6c7, 0x6ca, 0x6cd, 0x6d1, 0x6d4, 0x6d7, 0x6da,
	0x6de, 0x6e1, 0x6e4, 0x6e8, 0x6eb, 0x6ee, 0x6f2, 0x6f5, 0x6f8, 0x6fc, 0x6ff, 0x702, 0x706, 0x709, 0x70c, 0x710,
	0x713, 0x716, 0x71a, 0x71d, 0x720, 0x724, 0x727, 0x72a, 0x72e, 0x731, 0x734, 0x737, 0x73b, 0x73e, 0x741, 0x745,
	0x748, 0x74b, 0x74f, 0x752, 0x755, 0x759, 0x75c, 0x75f, 0x763, 0x766, 0x769, 0x76d, 0x770, 0x773, 0x777, 0x77a,
	0x77d, 0x781, 0x784, 0x787, 0x78b, 0x78e, 0x791, 0x795, 0x798, 0x79b, 0x79e, 0x7a2, 0x7a5, 0x7a8, 0x7ac, 0x7af,
	0x7b2, 0x7b6, 0x7b9, 0x7bc, 0x7c0, 0x7c3, 0x7c6, 0x7ca, 0x7cd, 0x7d0, 0x7d4, 0x7d7, 0x7da, 0x7de, 0x7e1, 0x7e4,
	0x7e8, 0x7eb, 0x7ee, 0x7f2, 0x7f5, 0x7f8, 0x7fb, 0x7ff,
};

constexpr uint64_t LUT_TODECIMAL_MULT[616] = {
	UINT64_C(0xc5a05277621be294), UINT64_C(0x9e19db92b4e31ba9), UINT64_C(0x7e7b160ef71c1621), UINT64_C(0xca5e89b18b602368),
	UINT64_C(0xa1e53af46f801c53), UINT64_C(0x81842f29f2cce376), UINT64_C(0xcf39e50feae16bf0), UINT64_C(0xa5c7ea73224deff3),
	UINT64_C(0x849feec281d7f329), UINT64_C(0xd433179d9c8cb841), UINT64_C(0xa9c2794ae3a3c69b), UINT64_C(0x87cec76f1c830549),
	UINT64_C(0xd94ad8b1c7380874), UINT64_C(0xadd57a27d29339f6), UINT64_C(0x8b112e86420f6192), UINT64_C(0xde81e40a034bcf50),
	UINT64_C(0xb201833b35d63f73), UINT64_C(0x8e679c2f5e44ff8f), UINT64_C(0xe3d8f9e563a198e5), UINT64_C(0xb6472e511c81471e),
	UINT64_C(0x91d28b7416cdd27e), UINT64_C(0xe950df20247c83fd), UINT64_C(0xbaa718e68396cffe), UINT64_C(0x95527a5202df0ccb),
	UINT64_C(0xeeea5d5004981478), UINT64_C(0xbf21e44003acdd2d), UINT64_C(0x98e7e9cccfbd7dbe), UINT64_C(0xf4a642e14c6262c9),
	UINT64_C(0xc3b8358109e84f07), UINT64_C(0x9c935e00d4b9d8d2), UINT64_C(0x7d42b19a43c7e0a8), UINT64_C(0xc86ab5c39fa63441),
	UINT64_C(0xa0555e361951c367), UINT64_C(0x80444b5e7aa7cf85), UINT64_C(0xcd3a1230c43fb26f), UINT64_C(0xa42e74f3d032f526),
	UINT64_C(0x83585d8fd9c25db8), UINT64_C(0xd226fc195c6a2f8c), UINT64_C(0xa81f301449ee8c70), UINT64_C(0x867f59a9d4bed6c0),
	UINT64_C(0xd732290fbacaf134), UINT64_C(0xac2820d9623bf429), UINT64_C(0x89b9b3e11b6329bb), UINT64_C(0xdc5c5301c56b75f7),
	UINT64_C(0xb049dc016abc5e60), UINT64_C(0x8d07e33455637eb3), UINT64_C(0xe1a63853bbd26451), UINT64_C(0xb484f9dc9641e9db),
	UINT64_C(0x906a617d450187e2), UINT64_C(0xe7109bfba19c0c9d), UINT64_C(0xb8da1662e7b00a17), UINT64_C(0x93e1ab8252f33b46),
	UINT64_C(0xec9c459d51852ba3), UINT64_C(0xbd49d14aa79dbc82), UINT64_C(0x976e41088617ca02), UINT64_C(0xf24a01a73cf2dcd0),
	UINT64_C(0xc1d4ce1f63f57d73), UINT64_C(0x9b10a4e5e9913129), UINT64_C(0x7c0d50b7ee0dc0ed), UINT64_C(0xc67bb4597ce2ce49),
	UINT64_C(0x9ec95d1463e8a507), UINT64_C(0x7f077da9e986ea6c), UINT64_C(0xcb3f2f7642717713), UINT64_C(0xa298f2c501f45f43),
	UINT64_C(0x8213f56a67f6b29c), UINT64_C(0xd01fef10a657842c), UINT64_C(0xa67ff273b8460357), UINT64_C(0x8533285c936b35df),
	UINT64_C(0xd51ea6fa85785631), UINT64_C(0xaa7eebfb9df9de8e), UINT64_C(0x8865899617fb1871), UINT64_C(0xda3c0f568cc4f3e9),
	UINT64_C(0xae9672aba3d0c321), UINT64_C(0x8bab8eefb6409c1a), UINT64_C(0xdf78e4b2bd342cf7), UINT64_C(0xb2c71d5bca9023f8),
	UINT64_C(0x8f05b1163ba6832d), UINT64_C(0xe4d5e82392a40515), UINT64_C(0xb7118682dbb66a77), UINT64_C(0x92746b9be2f8552c),
	UINT64_C(0xea53df5fd18d5514), UINT64_C(0xbb764c4ca7a44410), UINT64_C(0x95f83d0a1fb69cd9), UINT64_C(0xeff394dcff8a948f),
	UINT64_C(0xbff610b0cc6edd3f), UINT64_C(0x9991a6f3d6bf1766), UINT64_C(0xf5b5d7ec8acb58a3), UINT64_C(0xc491798a08a2ad4f),
	UINT64_C(0x9d412e0806e88aa6), UINT64_C(0x7dcdbe6cd253a21e), UINT64_C(0xc94930ae1d529cfd), UINT64_C(0xa1075a24e4421731),
	UINT64_C(0x80d2ae83e9ce78f4), UINT64_C(0xce1de40642e3f4b9), UINT64_C(0xa4e4b66b68b65d61), UINT64_C(0x83ea2b892091e44e),
	UINT64_C(0xd31045a8341ca07c), UINT64_C(0xa8d9d1535ce3b396), UINT64_C(0x8714a775e3e95c78), UINT64_C(0xd8210befd30efa5a),
	UINT64_C(0xace73cbfdc0bfb7b), UINT64_C(0x8a5296ffe33cc930), UINT64_C(0xdd50f1996b947519), UINT64_C(0xb10d8e1456105dad),
	UINT64_C(0x8da471a9de737e24), UINT64_C(0xe2a0b5dc971f303a), UINT64_C(0xb54d5e4a127f59c8), UINT64_C(0x910ab1d4db9914a0),
	UINT64_C(0xe8111c87c5c1ba9a), UINT64_C(0xb9a74a0637ce2ee1), UINT64_C(0x9485d4d1c63e8be8), UINT64_C(0xeda2ee1c7064130c),
	UINT64_C(0xbe1bf1b059e9a8d6), UINT64_C(0x98165af37b2153df), UINT64_C(0xf356f7ebf83552fe), UINT64_C(0xc2abf989935ddbfe),
	UINT64_C(0x9bbcc7a142b17ccc), UINT64_C(0x7c97061a9bc130a3), UINT64_C(0xc75809c42c684dd1), UINT64_C(0x9f79a169bd203e41),
	UINT64_C(0x7f9481216419cb67), UINT64_C(0xcc20ce9bd35c78a5), UINT64_C(0xa34d721642b06084), UINT64_C(0x82a45b450226b39d),
	UINT64_C(0xd106f86e69d785c8), UINT64_C(0xa738c6bebb12d16d), UINT64_C(0x85c7056562757457), UINT64_C(0xd60b3bd56a5586f2),
	UINT64_C(0xab3c2fddeeaad25b), UINT64_C(0x88fcf317f22241e2), UINT64_C(0xdb2e51bfe9d0696a), UINT64_C(0xaf58416654a6babb),
	UINT64_C(0x8c469ab843b89563), UINT64_C(0xe070f78d3927556b), UINT64_C(0xb38d92d760ec4455), UINT64_C(0x8fa475791a569d11),
	UINT64_C(0xe5d3ef282a242e82), UINT64_C(0xb7dcbf5354e9bece), UINT64_C(0x9316ff75dd87cbd8), UINT64_C(0xeb57ff22fc0c795a),
	UINT64_C(0xbc4665b596706115), UINT64_C(0x969eb7c47859e744), UINT64_C(0xf0fdf2d3f3c30b9f), UINT64_C(0xc0cb28a98fcf3c80),
	UINT64_C(0x9a3c2087a63f6399), UINT64_C(0xf6c69a72a3989f5c), UINT64_C(0xc56baec21c7a1916), UINT64_C(0x9defbf01b061adab),
	UINT64_C(0x7e59659af38157bc), UINT64_C(0xca28a291859bbf93), UINT64_C(0xa1ba1ba79e1632dc), UINT64_C(0x8161afb94b44f57d),
	UINT64_C(0xcf02b2c21207ef2f), UINT64_C(0xa59bc234db398c25), UINT64_C(0x847c9b5d7c2e09b7), UINT64_C(0xd3fa922f2d1675f2),
	UINT64_C(0xa99541bf57452b28), UINT64_C(0x87aa9aff79042287), UINT64_C(0xd910f7ff28069da4), UINT64_C(0xada72ccc20054aea),
	UINT64_C(0x8aec23d680043bee), UINT64_C(0xde469fbd99a05fe3), UINT64_C(0xb1d219647ae6b31c), UINT64_C(0x8e41ade9fbebc27d),
	UINT64_C(0xe39c49765fdf9d95), UINT64_C(0xb616a12b7fe617aa), UINT64_C(0x91abb422ccb812ef), UINT64_C(0xe912b9d1478ceb17),
	UINT64_C(0xba756174393d88e0), UINT64_C(0x952ab45cfa97a0b3), UINT64_C(0xeeaaba2e5dbf6785), UINT64_C(0xbeeefb584aff8604),
	UINT64_C(0x98bf2f79d5993803), UINT64_C(0xf46518c2ef5b8cd1), UINT64_C(0xc38413cf25e2d70e), UINT64_C(0x9c69a97284b578d8),
	UINT64_C(0x7d21545b9d5dfa46), UINT64_C(0xc83553c5c8965d3d), UINT64_C(0xa02aa96b06deb0fe), UINT64_C(0x802221226be55a65),
	UINT64_C(0xcd036837130890a1), UINT64_C(0xa402b9c5a8d3a6e7), UINT64_C(0x8335616aed761f1f), UINT64_C(0xd1ef0244af2364ff),
	UINT64_C(0xa7f26836f282b733), UINT64_C(0x865b86925b9bc5c2), UINT64_C(0xd6f8d7509292d603), UINT64_C(0xabfa45da0edbde69),
	UINT64_C(0x899504ae72497eba), UINT64_C(0xdc21a1171d42645d), UINT64_C(0xb01ae745b101e9e4), UINT64_C(0x8ce2529e2734bb1d),
	UINT64_C(0xe16a1dc9d8545e95), UINT64_C(0xb454e4a179dd1877), UINT64_C(0x9043ea1ac7e41393), UINT64_C(0xe6d3102ad96cec1e),
	UINT64_C(0xb8a8d9bbe123f018), UINT64_C(0x93ba47c980e98ce0), UINT64_C(0xec5d3fa8ce427b00), UINT64_C(0xbd176620a501fc00),
	UINT64_C(0x9745eb4d50ce6333), UINT64_C(0xf209787bb47d6b85), UINT64_C(0xc1a12d2fc3978937), UINT64_C(0x9ae757596946075f),
	UINT64_C(0x7bec45e12104d2b3), UINT64_C(0xc646d63501a1511e), UINT64_C(0x9e9f11c4014dda7e), UINT64_C(0x7ee5a7d0010b1532),
	UINT64_C(0xcb090c8001ab551c), UINT64_C(0xa26da3999aef774a), UINT64_C(0x81f14fae158c5f6e), UINT64_C(0xcfe87f7cef46ff17),
	UINT64_C(0xa6539930bf6bff46), UINT64_C(0x850fadc09923329e), UINT64_C(0xd4e5e2cdc1d1ea96), UINT64_C(0xaa51823e34a7eedf),
	UINT64_C(0x884134fe908658b2), UINT64_C(0xda01ee641a708dea), UINT64_C(0xae67f1e9aec07188), UINT64_C(0x8b865b215899f46d),
	UINT64_C(0xdf3d5e9bc0f653e1), UINT64_C(0xb2977ee300c50fe7), UINT64_C(0x8edf98b59a373fec), UINT64_C(0xe498f455c38b997a),
	UINT64_C(0xb6e0c377cfa2e12e), UINT64_C(0x924d692ca61be758), UINT64_C(0xea1575143cf97227), UINT64_C(0xbb445da9ca61281f),
	UINT64_C(0x95d04aee3b80ece6), UINT64_C(0xefb3ab16c59b14a3), UINT64_C(0xbfc2ef456ae276e9), UINT64_C(0x9968bf6abbe85f20),
	UINT64_C(0xf5746577930d6501), UINT64_C(0xc45d1df942711d9a), UINT64_C(0x9d174b2dcec0e47b), UINT64_C(0x7dac3c24a5671d30),
	UINT64_C(0xc913936dd571c84c), UINT64_C(0xa0dc75f1778e39d6), UINT64_C(0x80b05e5ac60b6178), UINT64_C(0xcde6fd5e09abcf27),
	UINT64_C(0xa4b8cab1a1563f52), UINT64_C(0x83c7088e1aab65db), UINT64_C(0xd2d80db02aabd62c), UINT64_C(0xa8acd7c0222311bd),
	UINT64_C(0x86f0ac99b4e8dafd), UINT64_C(0xd7e77a8f87daf7fc), UINT64_C(0xacb92ed9397bf996), UINT64_C(0x8a2dbf142dfcc7ab),
	UINT64_C(0xdd15fe86affad912), UINT64_C(0xb0de65388cc8ada8), UINT64_C(0x8d7eb76070a08aed), UINT64_C(0xe264589a4dcdab15),
	UINT64_C(0xb51d13aea4a488dd), UINT64_C(0x90e40fbeea1d3a4b), UINT64_C(0xe7d34c64a9c85d44), UINT64_C(0xb975d6b6ee39e437),
	UINT64_C(0x945e455f24fb1cf9), UINT64_C(0xed63a231d4c4fb27), UINT64_C(0xbde94e8e43d0c8ec), UINT64_C(0x97edd871cfda3a57),
	UINT64_C(0xf316271c7fc3908b), UINT64_C(0xc2781f49ffcfa6d5), UINT64_C(0x9b934c3b330c8577), UINT64_C(0x7c75d695c2706ac6),
	UINT64_C(0xc722f0ef9d80aad6), UINT64_C(0x9f4f2726179a2245), UINT64_C(0x7f7285b812e1b504), UINT64_C(0xcbea6f8ceb02bb3a),
	UINT64_C(0xa321f2d7226895c8), UINT64_C(0x82818f1281ed44a0), UINT64_C(0xd0cf4b50cfe20766), UINT64_C(0xa70c3c40a64e6c52),
	UINT64_C(0x85a36366eb71f041), UINT64_C(0xd5d238a4abe98068), UINT64_C(0xab0e93b6efee0054), UINT64_C(0x88d8762bf324cd10),
	UINT64_C(0xdaf3f04651d47b4c), UINT64_C(0xaf298d050e4395d7), UINT64_C(0x8c213d9da502de45), UINT64_C(0xe0352f62a19e306f),
	UINT64_C(0xb35dbf821ae4f38c), UINT64_C(0x8f7e32ce7bea5c70), UINT64_C(0xe596b7b0c643c719), UINT64_C(0xb7abc627050305ae),
	UINT64_C(0x92efd1b8d0cf37be), UINT64_C(0xeb194f8e1ae525fd), UINT64_C(0xbc143fa4e250eb31), UINT64_C(0x96769950b50d88f4),
	UINT64_C(0xf0bdc21abb48db20), UINT64_C(0xc097ce7bc90715b3), UINT64_C(0x9a130b963a6c115c), UINT64_C(0xf684df56c3e01bc7),
	UINT64_C(0xc5371912364ce305), UINT64_C(0x9dc5ada82b70b59e), UINT64_C(0x7e37be2022c0914b), UINT64_C(0xc9f2c9cd04674edf),
	UINT64_C(0xa18f07d736b90be5), UINT64_C(0x813f3978f8940984), UINT64_C(0xcecb8f27f4200f3a), UINT64_C(0xa56fa5b99019a5c8),
	UINT64_C(0x84595161401484a0), UINT64_C(0xd3c21bcecceda100), UINT64_C(0xa968163f0a57b400), UINT64_C(0x878678326eac9000),
	UINT64_C(0xd8d726b7177a8000), UINT64_C(0xad78ebc5ac620000), UINT64_C(0x8ac7230489e80000), UINT64_C(0xde0b6b3a76400000),
	UINT64_C(0xb1a2bc2ec5000000), UINT64_C(0x8e1bc9bf04000000), UINT64_C(0xe35fa931a0000000), UINT64_C(0xb5e620f480000000),
	UINT64_C(0x9184e72a00000000), UINT64_C(0xe8d4a51000000000), UINT64_C(0xba43b74000000000), UINT64_C(0x9502f90000000000),
	UINT64_C(0xee6b280000000000), UINT64_C(0xbebc200000000000), UINT64_C(0x9896800000000000), UINT64_C(0xf424000000000000),
	UINT64_C(0xc350000000000000), UINT64_C(0x9c40000000000000), UINT64_C(0x7d00000000000000), UINT64_C(0xc800000000000000),
	UINT64_C(0xa000000000000000), UINT64_C(0x8000000000000000), UINT64_C(0xcccccccccccccccd), UINT64_C(0xa3d70a3d70a3d70a),
	UINT64_C(0x83126e978d4fdf3b), UINT64_C(0xd1b71758e219652c), UINT64_C(0xa7c5ac471b478423), UINT64_C(0x8637bd05af6c69b6),
	UINT64_C(0xd6bf94d5e57a42bc), UINT64_C(0xabcc77118461cefd), UINT64_C(0x89705f4136b4a597), UINT64_C(0xdbe6fecebdedd5bf),
	UINT64_C(0xafebff0bcb24aaff), UINT64_C(0x8cbccc096f5088cc), UINT64_C(0xe12e13424bb40e13), UINT64_C(0xb424dc35095cd80f),
	UINT64_C(0x901d7cf73ab0acd9), UINT64_C(0xe69594bec44de15b), UINT64_C(0xb877aa3236a4b449), UINT64_C(0x9392ee8e921d5d07),
	UINT64_C(0xec1e4a7db69561a5), UINT64_C(0xbce5086492111aeb), UINT64_C(0x971da05074da7bef), UINT64_C(0xf1c90080baf72cb1),
	UINT64_C(0xc16d9a0095928a27), UINT64_C(0x9abe14cd44753b53), UINT64_C(0x7bcb43d769f762a9), UINT64_C(0xc612062576589ddb),
	UINT64_C(0x9e74d1b791e07e48), UINT64_C(0x7ec3daf941806507), UINT64_C(0xcad2f7f5359a3b3e), UINT64_C(0xa2425ff75e14fc32),
	UINT64_C(0x81ceb32c4b43fcf5), UINT64_C(0xcfb11ead453994ba), UINT64_C(0xa6274bbdd0fadd62), UINT64_C(0x84ec3c97da624ab5),
	UINT64_C(0xd4ad2dbfc3d07788), UINT64_C(0xaa242499697392d3), UINT64_C(0x881cea14545c7575), UINT64_C(0xd9c7dced53c72256),
	UINT64_C(0xae397d8aa96c1b78), UINT64_C(0x8b61313bbabce2c6), UINT64_C(0xdf01e85f912e37a3), UINT64_C(0xb267ed1940f1c61c),
	UINT64_C(0x8eb98a7a9a5b04e3), UINT64_C(0xe45c10c42a2b3b06), UINT64_C(0xb6b00d69bb55c8d1), UINT64_C(0x9226712162ab070e),
	UINT64_C(0xe9d71b689dde71b0), UINT64_C(0xbb127c53b17ec159), UINT64_C(0x95a8637627989aae), UINT64_C(0xef73d256a5c0f77d),
	UINT64_C(0xbf8fdb78849a5f97), UINT64_C(0x993fe2c6d07b7fac), UINT64_C(0xf53304714d9265e0), UINT64_C(0xc428d05aa4751e4d),
	UINT64_C(0x9ced737bb6c4183d), UINT64_C(0x7d8ac2c95f034697), UINT64_C(0xc8de047564d20a8c), UINT64_C(0xa0b19d2ab70e6ed6),
	UINT64_C(0x808e17555f3ebf12), UINT64_C(0xcdb02555653131b6), UINT64_C(0xa48ceaaab75a8e2b), UINT64_C(0x83a3eeeef9153e89),
	UINT64_C(0xd29fe4b18e88640f), UINT64_C(0xa87fea27a539e9a5), UINT64_C(0x86ccbb52ea94baeb), UINT64_C(0xd7adf884aa879177),
	UINT64_C(0xac8b2d36eed2dac6), UINT64_C(0x8a08f0f8bf0f156b), UINT64_C(0xdcdb1b2798182245), UINT64_C(0xb0af48ec79ace837),
	UINT64_C(0x8d590723948a535f), UINT64_C(0xe2280b6c20dd5232), UINT64_C(0xb4ecd5f01a4aa828), UINT64_C(0x90bd77f3483bb9ba),
	UINT64_C(0xe7958cb87392c2c3), UINT64_C(0xb94470938fa89bcf), UINT64_C(0x9436c0760c86e30c), UINT64_C(0xed246723473e3813),
	UINT64_C(0xbdb6b8e905cb600f), UINT64_C(0x97c560ba6b0919a6), UINT64_C(0xf2d56790ab41c2a3), UINT64_C(0xc24452da229b021c),
	UINT64_C(0x9b69dbe1b548ce7d), UINT64_C(0x7c54afe7c43a3eca), UINT64_C(0xc6ede63fa05d3144), UINT64_C(0x9f24b832e6b0f436),
	UINT64_C(0x7f50935bebc0c35e), UINT64_C(0xcbb41ef979346bca), UINT64_C(0xa2f67f2dfa90563b), UINT64_C(0x825ecc24c8737830),
	UINT64_C(0xd097ad07a71f26b2), UINT64_C(0xa6dfbd9fb8e5b88f), UINT64_C(0x857fcae62d8493a5), UINT64_C(0xd59944a37c0752a2),
	UINT64_C(0xaae103b5fcd2a882), UINT64_C(0x88b402f7fd75539b), UINT64_C(0xdab99e59958885c5), UINT64_C(0xaefae51477a06b04),
	UINT64_C(0x8bfbea76c619ef36), UINT64_C(0xdff9772470297ebd), UINT64_C(0xb32df8e9f3546564), UINT64_C(0x8f57fa54c2a9eab7),
	UINT64_C(0xe55990879ddcaabe), UINT64_C(0xb77ada0617e3bbcb), UINT64_C(0x92c8ae6b464fc96f), UINT64_C(0xeadab0aba3b2dbe5),
	UINT64_C(0xbbe226efb628afeb), UINT64_C(0x964e858c91ba2655), UINT64_C(0xf07da27a82c37088), UINT64_C(0xc06481fb9bcf8d3a),
	UINT64_C(0x99ea0196163fa42e), UINT64_C(0xf64335bcf065d37d), UINT64_C(0xc5029163f384a931), UINT64_C(0x9d9ba7832936edc1),
	UINT64_C(0x7e161f9c20f8be34), UINT64_C(0xc9bcff6034c13053), UINT64_C(0xa163ff802a3426a9), UINT64_C(0x811ccc668829b887),
	UINT64_C(0xce947a3da6a9273e), UINT64_C(0xa54394fe1eedb8ff), UINT64_C(0x843610cb4bf160cc), UINT64_C(0xd389b47879823479),
	UINT64_C(0xa93af6c6c79b5d2e), UINT64_C(0x87625f056c7c4a8b), UINT64_C(0xd89d64d57a607745), UINT64_C(0xad4ab7112eb3929e),
	UINT64_C(0x8aa22c0dbef60ee4), UINT64_C(0xddd0467c64bce4a1), UINT64_C(0xb1736b96b6fd83b4), UINT64_C(0x8df5efabc5979c90),
	UINT64_C(0xe3231912d5bf60e6), UINT64_C(0xb5b5ada8aaff80b8), UINT64_C(0x915e2486ef32cd60), UINT64_C(0xe896a0d7e51e1566),
	UINT64_C(0xba121a4650e4ddec), UINT64_C(0x94db483840b717f0), UINT64_C(0xee2ba6c0678b597f), UINT64_C(0xbe89523386091466),
	UINT64_C(0x986ddb5c6b3a76b8), UINT64_C(0xf3e2f893dec3f126), UINT64_C(0xc31bfa0fe5698db8), UINT64_C(0x9c1661a651213e2d),
	UINT64_C(0x7cdeb4850db431be), UINT64_C(0xc7caba6e7c5382c9), UINT64_C(0x9fd561f1fd0f9bd4), UINT64_C(0x7fdde7f4ca72e310),
	UINT64_C(0xcc963fee10b7d1b3), UINT64_C(0xa3ab66580d5fdaf6), UINT64_C(0x82ef85133de648c5), UINT64_C(0xd17f3b51fca3a7a1),
	UINT64_C(0xa798fc4196e952e7), UINT64_C(0x8613fd0145877586), UINT64_C(0xd686619ba27255a3), UINT64_C(0xab9eb47c81f5114f),
	UINT64_C(0x894bc396ce5da772), UINT64_C(0xdbac6c247d62a584), UINT64_C(0xafbd2350644eead0), UINT64_C(0x8c974f7383725573),
	UINT64_C(0xe0f218b8d25088b8), UINT64_C(0xb3f4e093db73a093), UINT64_C(0x8ff71a0fe2c2e6dc), UINT64_C(0xe65829b3046b0afa),
	UINT64_C(0xb84687c269ef3bfb), UINT64_C(0x936b9fcebb25c996), UINT64_C(0xebdf661791d60f56), UINT64_C(0xbcb2b812db11a5de),
	UINT64_C(0x96f5600f15a7b7e5), UINT64_C(0xf18899b1bc3f8ca2), UINT64_C(0xc13a148e3032d6e8), UINT64_C(0x9a94dd3e8cf578ba),
	UINT64_C(0xf7549530e188c129), UINT64_C(0xc5dd44271ad3cdba), UINT64_C(0x9e4a9cec15763e2f), UINT64_C(0x7ea21723445e9825),
	UINT64_C(0xca9cf1d206fdc03c), UINT64_C(0xa21727db38cb0030), UINT64_C(0x81ac1fe293d599c0), UINT64_C(0xcf79cc9db955c2cc),
	UINT64_C(0xa5fb0a17c777cf0a), UINT64_C(0x84c8d4dfd2c63f3b), UINT64_C(0xd47487cc8470652b), UINT64_C(0xa9f6d30a038d1dbc),
	UINT64_C(0x87f8a8d4cfa417ca), UINT64_C(0xd98ddaee19068c76), UINT64_C(0xae0b158b4738705f), UINT64_C(0x8b3c113c38f9f37f),
	UINT64_C(0xdec681f9f4c31f31), UINT64_C(0xb23867fb2a35b28e), UINT64_C(0x8e938662882af53e), UINT64_C(0xe41f3d6a7377eeca),
	UINT64_C(0xb67f6455292cbf08), UINT64_C(0x91ff83775423cc06), UINT64_C(0xe998d258869facd7), UINT64_C(0xbae0a846d2195713),
	UINT64_C(0x9580869f0e7aac0f), UINT64_C(0xef340a98172aace5), UINT64_C(0xbf5cd54678eef0b7), UINT64_C(0x991711052d8bf3c5),
	UINT64_C(0xf4f1b4d515acb93c), UINT64_C(0xc3f490aa77bd60fd), UINT64_C(0x9cc3a6eec6311a64), UINT64_C(0x7d6952589e8daeb6),
	UINT64_C(0xc8a883c0fdaf7df0), UINT64_C(0xa086cfcd97bf97f4), UINT64_C(0x806bd9714632dff6), UINT64_C(0xcd795be870516656),
	UINT64_C(0xa46116538d0deb78), UINT64_C(0x8380dea93da4bc60), UINT64_C(0xd267caa862a12d67), UINT64_C(0xa8530886b54dbdec),
	UINT64_C(0x86a8d39ef77164bd), UINT64_C(0xd77485cb25823ac7), UINT64_C(0xac5d37d5b79b6239), UINT64_C(0x89e42caaf9491b61),
	UINT64_C(0xdca04777f541c568), UINT64_C(0xb080392cc4349ded), UINT64_C(0x8d3360f09cf6e4bd), UINT64_C(0xe1ebce4dc7f16dfc),
	UINT64_C(0xb4bca50b065abe63), UINT64_C(0x9096ea6f3848984f), UINT64_C(0xe757dd7ec07426e5), UINT64_C(0xb913179899f68584),
	UINT64_C(0x940f4613ae5ed137), UINT64_C(0xece53cec4a314ebe), UINT64_C(0xbd8430bd08277231), UINT64_C(0x979cf3ca6cec5b5b),
	UINT64_C(0xf294b943e17a2bc4), UINT64_C(0xc21094364dfb5637), UINT64_C(0x9b407691d7fc44f8), UINT64_C(0x7c33920e46636a60),
	UINT64_C(0xc6b8e9b0709f109a), UINT64_C(0x9efa548d26e5a6e2), UINT64_C(0x7f2eaa0a85848581), UINT64_C(0xcb7ddcdda26da269),
	UINT64_C(0xa2cb1717b52481ed), UINT64_C(0x823c12795db6ce57), UINT64_C(0xd0601d8efc57b08c), UINT64_C(0xa6b34ad8c9dfc070),
	UINT64_C(0x855c3be0a17fcd26), UINT64_C(0xd5605fcdcf32e1d7), UINT64_C(0xaab37fd7d8f58179), UINT64_C(0x888f99797a5e012d),
	UINT64_C(0xda7f5bf590966849), UINT64_C(0xaecc49914078536d), UINT64_C(0x8bd6a141006042be), UINT64_C(0xdfbdcece67006ac9),
	UINT64_C(0xb2fe3f0b8599ef08), UINT64_C(0x8f31cc0937ae58d3), UINT64_C(0xe51c79a85916f485), UINT64_C(0xb749faed14125d37),
	UINT64_C(0x92a1958a7675175f), UINT64_C(0xea9c227723ee8bcb), UINT64_C(0xbbb01b9283253ca3), UINT64_C(0x96267c7535b763b5),
	UINT64_C(0xf03d93eebc589f88), UINT64_C(0xc0314325637a193a), UINT64_C(0x99c102844f94e0fb), UINT64_C(0xf6019da07f549b2b),
	UINT64_C(0xc4ce17b399107c23), UINT64_C(0x9d71ac8fada6c9b5), UINT64_C(0x7df48a0c8aebd491), UINT64_C(0xc987434744ac874f),
	UINT64_C(0xa139029f6a239f72), UINT64_C(0x80fa687f881c7f8e), UINT64_C(0xce5d73ff402d98e4), UINT64_C(0xa5178fff668ae0b6),
	UINT64_C(0x8412d9991ed58092), UINT64_C(0xd3515c2831559a83), UINT64_C(0xa90de3535aaae202), UINT64_C(0x873e4f75e2224e68),
	UINT64_C(0xd863b256369d4a41), UINT64_C(0xad1c8eab5ee43b67), UINT64_C(0x8a7d3eef7f1cfc52), UINT64_C(0xdd95317f31c7fa1d),
	UINT64_C(0xb1442798f49ffb4b), UINT64_C(0x8dd01fad907ffc3c), UINT64_C(0xe2e69915b3fff9f9), UINT64_C(0xb58547448ffffb2e),
	UINT64_C(0x91376c36d99995be), UINT64_C(0xe858ad248f5c22ca), UINT64_C(0xb9e08a83a5e34f08), UINT64_C(0x94b3a202eb1c3f39),
	UINT64_C(0xedec366b11c6cb8f), UINT64_C(0xbe5691ef416bd60c), UINT64_C(0x9845418c345644d7), UINT64_C(0xf3a20279ed56d48a),
	UINT64_C(0xc2e801fb244576d5), UINT64_C(0x9becce62836ac577), UINT64_C(0x7cbd71e869223793), UINT64_C(0xc795830d75038c1e),
};

constexpr uint64_t LUT_TODECIMAL_DIV[18] = {
	UINT64_C(0x0b1a2bc2ec500000), UINT64_C(0x011c37937e080000), UINT64_C(0x001c6bf526340000), UINT64_C(0x0002d79883d20000),
	UINT64_C(0x000048c273950000), UINT64_C(0x00000746a5288000), UINT64_C(0x000000ba43b74000), UINT64_C(0x00000012a05f2000),
	UINT64_C(0x00000001dcd65000), UINT64_C(0x000000002faf0800), UINT64_C(0x0000000004c4b400), UINT64_C(0x00000000007a1200),
	UINT64_C(0x00000000000c3500), UINT64_C(0x0000000000013880), UINT64_C(0x0000000000001f40), UINT64_C(0x0000000000000320),
	UINT64_C(0x0000000000000050), UINT64_C(0x0000000000000008),
};

constexpr uint32_t LUT_FROMDECIMAL_EXPO[617] = {
	0x001, 0x003, 0x006, 0x00a, 0x00d, 0x010, 0x013, 0x017, 0x01a, 0x01d, 0x021, 0x024, 0x027, 0x02b, 0x02e, 0x031,
	0x035, 0x038, 0x03b, 0x03f, 0x042, 0x045, 0x049, 0x04c, 0x04f, 0x053, 0x056, 0x059, 0x05d, 0x060, 0x063, 0x067,
	0x06a, 0x06d, 0x070, 0x074, 0x077, 0x07a, 0x07e, 0x081, 0x084, 0x088, 0x08b, 0x08e, 0x092, 0x095, 0x098, 0x09c,
	0x09f, 0x0a2, 0x0a6, 0x0a9, 0x0ac, 0x0b0, 0x0b3, 0x0b6, 0x0ba, 0x0bd, 0x0c0, 0x0c4, 0x0c7, 0x0ca, 0x0ce, 0x0d1,
	0x0d4, 0x0d7, 0x0db, 0x0de, 0x0e1, 0x0e5, 0x0e8, 0x0eb, 0x0ef, 0x0f2, 0x0f5, 0x0f9, 0x0fc, 0x0ff, 0x103, 0x106,
	0x109, 0x10d, 0x110, 0x113, 0x117, 0x11a, 0x11d, 0x121, 0x124, 0x127, 0x12b, 0x12e, 0x131, 0x134, 0x138, 0x13b,
	0x13e, 0x142, 0x145, 0x148, 0x14c, 0x14f, 0x152, 0x156, 0x159, 0x15c, 0x160, 0x163, 0x166, 0x16a, 0x16d, 0x170,
	0x174, 0x177, 0x17a, 0x17e, 0x181, 0x184, 0x188, 0x18b, 0x18e, 0x192, 0x195, 0x198, 0x19b, 0x19f, 0x1a2, 0x1a5,
	0x1a9, 0x1ac, 0x1af, 0x1b3, 0x1b6, 0x1b9, 0x1bd, 0x1c0, 0x1c3, 0x1c7, 0x1ca, 0x1cd, 0x1d1, 0x1d4, 0x1d7, 0x1db,
	0x1de, 0x1e1, 0x1e5, 0x1e8, 0x1eb, 0x1ef, 0x1f2, 0x1f5, 0x1f8, 0x1fc, 0x1ff, 0x202, 0x206, 0x209, 0x20c, 0x210,
	0x213, 0x216, 0x21a, 0x21d, 0x220, 0x224, 0x227, 0x22a, 0x22e, 0x231, 0x234, 0x238, 0x23b, 0x23e, 0x242, 0x245,
	0x248, 0x24c, 0x24f, 0x252, 0x255, 0x259, 0x25c, 0x25f, 0x263, 0x266, 0x269, 0x26d, 0x270, 0x273, 0x277, 0x27a,
	0x27d, 0x281, 0x284, 0x287, 0x28b, 0x28e, 0x291, 0x295, 0x298, 0x29b, 0x29f, 0x2a2, 0x2a5, 0x2a9, 0x2ac, 0x2af,
	0x2b3, 0x2b6, 0x2b9, 0x2bc, 0x2c0, 0x2c3, 0x2c6, 0x2ca, 0x2cd, 0x2d0, 0x2d4, 0x2d7, 0x2da, 0x2de, 0x2e1, 0x2e4,
	0x2e8, 0x2eb, 0x2ee, 0x2f2, 0x2f5, 0x2f8, 0x2fc, 0x2ff, 0x302, 0x306, 0x309, 0x30c, 0x310, 0x313, 0x316, 0x319,
	0x31d, 0x320, 0x323, 0x327, 0x32a, 0x32d, 0x331, 0x334, 0x337, 0x33b, 0x33e, 0x341, 0x345, 0x348, 0x34b, 0x34f,
	0x352, 0x355, 0x359, 0x35c, 0x35f, 0x363, 0x366, 0x369, 0x36d, 0x370, 0x373, 0x377, 0x37a, 0x37d, 0x380, 0x384,
	0x387, 0x38a, 0x38e, 0x391, 0x394, 0x398, 0x39b, 0x39e, 0x3a2, 0x3a5, 0x3a8, 0x3ac, 0x3af, 0x3b2, 0x3b6, 0x3b9,
	0x3bc, 0x3c0, 0x3c3, 0x3c6, 0x3ca, 0x3cd, 0x3d0, 0x3d4, 0x3d7, 0x3da, 0x3dd, 0x3e1, 0x3e4, 0x3e7, 0x3eb, 0x3ee,
	0x3f1, 0x3f5, 0x3f8, 0x3fb, 0x3ff, 0x402, 0x405, 0x409, 0x40c, 0x40f, 0x413, 0x416, 0x419, 0x41d, 0x420, 0x423,
	0x427, 0x42a, 0x42d, 0x431, 0x434, 0x437, 0x43b, 0x43e, 0x441, 0x444, 0x448, 0x44b, 0x44e, 0x452, 0x455, 0x458,
	0x45c, 0x45f, 0x462, 0x466, 0x469, 0x46c, 0x470, 0x473, 0x476, 0x47a, 0x47d, 0x480, 0x484, 0x487, 0x48a, 0x48e,
	0x491, 0x494, 0x498, 0x49b, 0x49e, 0x4a1, 0x4a5, 0x4a8, 0x4ab, 0x4af, 0x4b2, 0x4b5, 0x4b9, 0x4bc, 0x4bf, 0x4c3,
	0x4c6, 0x4c9, 0x4cd, 0x4d0, 0x4d3, 0x4d7, 0x4da, 0x4dd, 0x4e1, 0x4e4, 0x4e7, 0x4eb, 0x4ee, 0x4f1, 0x4f5, 0x4f8,
	0x4fb, 0x4fe, 0x502, 0x505, 0x508, 0x50c, 0x50f, 0x512, 0x516, 0x519, 0x51c, 0x520, 0x523, 0x526, 0x52a, 0x52d,
	0x530, 0x534, 0x537, 0x53a, 0x53e, 0x541, 0x544, 0x548, 0x54b, 0x54e, 0x552, 0x555, 0x558, 0x55c, 0x55f, 0x562,
	0x565, 0x569, 0x56c, 0x56f, 0x573, 0x576, 0x579, 0x57d, 0x580, 0x583, 0x587, 0x58a, 0x58d, 0x591, 0x594, 0x597,
	0x59b, 0x59e, 0x5a1, 0x5a5, 0x5a8, 0x5ab, 0x5af, 0x5b2, 0x5b5, 0x5b9, 0x5bc, 0x5bf, 0x5c2, 0x5c6, 0x5c9, 0x5cc,
	0x5d0, 0x5d3, 0x5d6, 0x5da, 0x5dd, 0x5e0, 0x5e4, 0x5e7, 0x5ea, 0x5ee, 0x5f1, 0x5f4, 0x5f8, 0x5fb, 0x5fe, 0x602,
	0x605, 0x608, 0x60c, 0x60f, 0x612, 0x616, 0x619, 0x61c, 0x620, 0x623, 0x626, 0x629, 0x62d, 0x630, 0x633, 0x637,
	0x63a, 0x63d, 0x641, 0x644, 0x647, 0x64b, 0x64e, 0x651, 0x655, 0x658, 0x65b, 0x65f, 0x662, 0x665, 0x669, 0x66c,
	0x66f, 0x673, 0x676, 0x679, 0x67d, 0x680, 0x683, 0x686, 0x68a, 0x68d, 0x690, 0x694, 0x697, 0x69a, 0x69e, 0x6a1,
	0x6a4, 0x6a8, 0x6ab, 0x6ae, 0x6b2, 0x6b5, 0x6b8, 0x6bc, 0x6bf, 0x6c2, 0x6c6, 0x6c9, 0x6cc, 0x6d0, 0x6d3, 0x6d6,
	0x6da, 0x6dd, 0x6e0, 0x6e3, 0x6e7, 0x6ea, 0x6ed, 0x6f1, 0x6f4, 0x6f7, 0x6fb, 0x6fe, 0x701, 0x705, 0x708, 0x70b,
	0x70f, 0x712, 0x715, 0x719, 0x71c, 0x71f, 0x723, 0x726, 0x729, 0x72d, 0x730, 0x733, 0x737, 0x73a, 0x73d, 0x741,
	0x744, 0x747, 0x74a, 0x74e, 0x751, 0x754, 0x758, 0x75b, 0x75e, 0x762, 0x765, 0x768, 0x76c, 0x76f, 0x772, 0x776,
	0x779, 0x77c, 0x780, 0x783, 0x786, 0x78a, 0x78d, 0x790, 0x794, 0x797, 0x79a, 0x79e, 0x7a1, 0x7a4, 0x7a7, 0x7ab,
	0x7ae, 0x7b1, 0x7b5, 0x7b8, 0x7bb, 0x7bf, 0x7c2, 0x7c5, 0x7c9, 0x7cc, 0x7cf, 0x7d3, 0x7d6, 0x7d9, 0x7dd, 0x7e0,
	0x7e3, 0x7e7, 0x7ea, 0x7ed, 0x7f1, 0x7f4, 0x7f7, 0x7fb, 0x7fe,
};

constexpr uint64_t LUT_FROMDECIMAL_MULT[617] = {
	UINT64_C(0x4252bb4aff4c3a37), UINT64_C(0xa5ced43b7e3e9188), UINT64_C(0xcf42894a5dce35ea), UINT64_C(0x818995ce7aa0e1b2),
	UINT64_C(0xa1ebfb4219491a1f), UINT64_C(0xca66fa129f9b60a7), UINT64_C(0xfd00b897478238d1), UINT64_C(0x9e20735e8cb16382),
	UINT64_C(0xc5a890362fddbc63), UINT64_C(0xf712b443bbd52b7c), UINT64_C(0x9a6bb0aa55653b2d), UINT64_C(0xc1069cd4eabe89f9),
	UINT64_C(0xf148440a256e2c77), UINT64_C(0x96cd2a865764dbca), UINT64_C(0xbc807527ed3e12bd), UINT64_C(0xeba09271e88d976c),
	UINT64_C(0x93445b8731587ea3), UINT64_C(0xb8157268fdae9e4c), UINT64_C(0xe61acf033d1a45df), UINT64_C(0x8fd0c16206306bac),
	UINT64_C(0xb3c4f1ba87bc8697), UINT64_C(0xe0b62e2929aba83c), UINT64_C(0x8c71dcd9ba0b4926), UINT64_C(0xaf8e5410288e1b6f),
	UINT64_C(0xdb71e91432b1a24b), UINT64_C(0x892731ac9faf056f), UINT64_C(0xab70fe17c79ac6ca), UINT64_C(0xd64d3d9db981787d),
	UINT64_C(0x85f0468293f0eb4e), UINT64_C(0xa76c582338ed2622), UINT64_C(0xd1476e2c07286faa), UINT64_C(0x82cca4db847945ca),
	UINT64_C(0xa37fce126597973d), UINT64_C(0xcc5fc196fefd7d0c), UINT64_C(0xff77b1fcbebcdc4f), UINT64_C(0x9faacf3df73609b1),
	UINT64_C(0xc795830d75038c1e), UINT64_C(0xf97ae3d0d2446f25), UINT64_C(0x9becce62836ac577), UINT64_C(0xc2e801fb244576d5),
	UINT64_C(0xf3a20279ed56d48a), UINT64_C(0x9845418c345644d7), UINT64_C(0xbe5691ef416bd60c), UINT64_C(0xedec366b11c6cb8f),
	UINT64_C(0x94b3a202eb1c3f39), UINT64_C(0xb9e08a83a5e34f08), UINT64_C(0xe858ad248f5c22ca), UINT64_C(0x91376c36d99995be),
	UINT64_C(0xb58547448ffffb2e), UINT64_C(0xe2e69915b3fff9f9), UINT64_C(0x8dd01fad907ffc3c), UINT64_C(0xb1442798f49ffb4b),
	UINT64_C(0xdd95317f31c7fa1d), UINT64_C(0x8a7d3eef7f1cfc52), UINT64_C(0xad1c8eab5ee43b67), UINT64_C(0xd863b256369d4a41),
	UINT64_C(0x873e4f75e2224e68), UINT64_C(0xa90de3535aaae202), UINT64_C(0xd3515c2831559a83), UINT64_C(0x8412d9991ed58092),
	UINT64_C(0xa5178fff668ae0b6), UINT64_C(0xce5d73ff402d98e4), UINT64_C(0x80fa687f881c7f8e), UINT64_C(0xa139029f6a239f72),
	UINT64_C(0xc987434744ac874f), UINT64_C(0xfbe9141915d7a922), UINT64_C(0x9d71ac8fada6c9b5), UINT64_C(0xc4ce17b399107c23),
	UINT64_C(0xf6019da07f549b2b), UINT64_C(0x99c102844f94e0fb), UINT64_C(0xc0314325637a193a), UINT64_C(0xf03d93eebc589f88),
	UINT64_C(0x96267c7535b763b5), UINT64_C(0xbbb01b9283253ca3), UINT64_C(0xea9c227723ee8bcb), UINT64_C(0x92a1958a7675175f),
	UINT64_C(0xb749faed14125d37), UINT64_C(0xe51c79a85916f485), UINT64_C(0x8f31cc0937ae58d3), UINT64_C(0xb2fe3f0b8599ef08),
	UINT64_C(0xdfbdcece67006ac9), UINT64_C(0x8bd6a141006042be), UINT64_C(0xaecc49914078536d), UINT64_C(0xda7f5bf590966849),
	UINT64_C(0x888f99797a5e012d), UINT64_C(0xaab37fd7d8f58179), UINT64_C(0xd5605fcdcf32e1d7), UINT64_C(0x855c3be0a17fcd26),
	UINT64_C(0xa6b34ad8c9dfc070), UINT64_C(0xd0601d8efc57b08c), UINT64_C(0x823c12795db6ce57), UINT64_C(0xa2cb1717b52481ed),
	UINT64_C(0xcb7ddcdda26da269), UINT64_C(0xfe5d54150b090b03), UINT64_C(0x9efa548d26e5a6e2), UINT64_C(0xc6b8e9b0709f109a),
	UINT64_C(0xf867241c8cc6d4c1), UINT64_C(0x9b407691d7fc44f8), UINT64_C(0xc21094364dfb5637), UINT64_C(0xf294b943e17a2bc4),
	UINT64_C(0x979cf3ca6cec5b5b), UINT64_C(0xbd8430bd08277231), UINT64_C(0xece53cec4a314ebe), UINT64_C(0x940f4613ae5ed137),
	UINT64_C(0xb913179899f68584), UINT64_C(0xe757dd7ec07426e5), UINT64_C(0x9096ea6f3848984f), UINT64_C(0xb4bca50b065abe63),
	UINT64_C(0xe1ebce4dc7f16dfc), UINT64_C(0x8d3360f09cf6e4bd), UINT64_C(0xb080392cc4349ded), UINT64_C(0xdca04777f541c568),
	UINT64_C(0x89e42caaf9491b61), UINT64_C(0xac5d37d5b79b6239), UINT64_C(0xd77485cb25823ac7), UINT64_C(0x86a8d39ef77164bd),
	UINT64_C(0xa8530886b54dbdec), UINT64_C(0xd267caa862a12d67), UINT64_C(0x8380dea93da4bc60), UINT64_C(0xa46116538d0deb78),
	UINT64_C(0xcd795be870516656), UINT64_C(0x806bd9714632dff6), UINT64_C(0xa086cfcd97bf97f4), UINT64_C(0xc8a883c0fdaf7df0),
	UINT64_C(0xfad2a4b13d1b5d6c), UINT64_C(0x9cc3a6eec6311a64), UINT64_C(0xc3f490aa77bd60fd), UINT64_C(0xf4f1b4d515acb93c),
	UINT64_C(0x991711052d8bf3c5), UINT64_C(0xbf5cd54678eef0b7), UINT64_C(0xef340a98172aace5), UINT64_C(0x9580869f0e7aac0f),
	UINT64_C(0xbae0a846d2195713), UINT64_C(0xe998d258869facd7), UINT64_C(0x91ff83775423cc06), UINT64_C(0xb67f6455292cbf08),
	UINT64_C(0xe41f3d6a7377eeca), UINT64_C(0x8e938662882af53e), UINT64_C(0xb23867fb2a35b28e), UINT64_C(0xdec681f9f4c31f31),
	UINT64_C(0x8b3c113c38f9f37f), UINT64_C(0xae0b158b4738705f), UINT64_C(0xd98ddaee19068c76), UINT64_C(0x87f8a8d4cfa417ca),
	UINT64_C(0xa9f6d30a038d1dbc), UINT64_C(0xd47487cc8470652b), UINT64_C(0x84c8d4dfd2c63f3b), UINT64_C(0xa5fb0a17c777cf0a),
	UINT64_C(0xcf79cc9db955c2cc), UINT64_C(0x81ac1fe293d599c0), UINT64_C(0xa21727db38cb0030), UINT64_C(0xca9cf1d206fdc03c),
	UINT64_C(0xfd442e4688bd304b), UINT64_C(0x9e4a9cec15763e2f), UINT64_C(0xc5dd44271ad3cdba), UINT64_C(0xf7549530e188c129),
	UINT64_C(0x9a94dd3e8cf578ba), UINT64_C(0xc13a148e3032d6e8), UINT64_C(0xf18899b1bc3f8ca2), UINT64_C(0x96f5600f15a7b7e5),
	UINT64_C(0xbcb2b812db11a5de), UINT64_C(0xebdf661791d60f56), UINT64_C(0x936b9fcebb25c996), UINT64_C(0xb84687c269ef3bfb),
	UINT64_C(0xe65829b3046b0afa), UINT64_C(0x8ff71a0fe2c2e6dc), UINT64_C(0xb3f4e093db73a093), UINT64_C(0xe0f218b8d25088b8),
	UINT64_C(0x8c974f7383725573), UINT64_C(0xafbd2350644eead0), UINT64_C(0xdbac6c247d62a584), UINT64_C(0x894bc396ce5da772),
	UINT64_C(0xab9eb47c81f5114f), UINT64_C(0xd686619ba27255a3), UINT64_C(0x8613fd0145877586), UINT64_C(0xa798fc4196e952e7),
	UINT64_C(0xd17f3b51fca3a7a1), UINT64_C(0x82ef85133de648c5), UINT64_C(0xa3ab66580d5fdaf6), UINT64_C(0xcc963fee10b7d1b3),
	UINT64_C(0xffbbcfe994e5c620), UINT64_C(0x9fd561f1fd0f9bd4), UINT64_C(0xc7caba6e7c5382c9), UINT64_C(0xf9bd690a1b68637b),
	UINT64_C(0x9c1661a651213e2d), UINT64_C(0xc31bfa0fe5698db8), UINT64_C(0xf3e2f893dec3f126), UINT64_C(0x986ddb5c6b3a76b8),
	UINT64_C(0xbe89523386091466), UINT64_C(0xee2ba6c0678b597f), UINT64_C(0x94db483840b717f0), UINT64_C(0xba121a4650e4ddec),
	UINT64_C(0xe896a0d7e51e1566), UINT64_C(0x915e2486ef32cd60), UINT64_C(0xb5b5ada8aaff80b8), UINT64_C(0xe3231912d5bf60e6),
	UINT64_C(0x8df5efabc5979c90), UINT64_C(0xb1736b96b6fd83b4), UINT64_C(0xddd0467c64bce4a1), UINT64_C(0x8aa22c0dbef60ee4),
	UINT64_C(0xad4ab7112eb3929e), UINT64_C(0xd89d64d57a607745), UINT64_C(0x87625f056c7c4a8b), UINT64_C(0xa93af6c6c79b5d2e),
	UINT64_C(0xd389b47879823479), UINT64_C(0x843610cb4bf160cc), UINT64_C(0xa54394fe1eedb8ff), UINT64_C(0xce947a3da6a9273e),
	UINT64_C(0x811ccc668829b887), UINT64_C(0xa163ff802a3426a9), UINT64_C(0xc9bcff6034c13053), UINT64_C(0xfc2c3f3841f17c68),
	UINT64_C(0x9d9ba7832936edc1), UINT64_C(0xc5029163f384a931), UINT64_C(0xf64335bcf065d37d), UINT64_C(0x99ea0196163fa42e),
	UINT64_C(0xc06481fb9bcf8d3a), UINT64_C(0xf07da27a82c37088), UINT64_C(0x964e858c91ba2655), UINT64_C(0xbbe226efb628afeb),
	UINT64_C(0xeadab0aba3b2dbe5), UINT64_C(0x92c8ae6b464fc96f), UINT64_C(0xb77ada0617e3bbcb), UINT64_C(0xe55990879ddcaabe),
	UINT64_C(0x8f57fa54c2a9eab7), UINT64_C(0xb32df8e9f3546564), UINT64_C(0xdff9772470297ebd), UINT64_C(0x8bfbea76c619ef36),
	UINT64_C(0xaefae51477a06b04), UINT64_C(0xdab99e59958885c5), UINT64_C(0x88b402f7fd75539b), UINT64_C(0xaae103b5fcd2a882),
	UINT64_C(0xd59944a37c0752a2), UINT64_C(0x857fcae62d8493a5), UINT64_C(0xa6dfbd9fb8e5b88f), UINT64_C(0xd097ad07a71f26b2),
	UINT64_C(0x825ecc24c8737830), UINT64_C(0xa2f67f2dfa90563b), UINT64_C(0xcbb41ef979346bca), UINT64_C(0xfea126b7d78186bd),
	UINT64_C(0x9f24b832e6b0f436), UINT64_C(0xc6ede63fa05d3144), UINT64_C(0xf8a95fcf88747d94), UINT64_C(0x9b69dbe1b548ce7d),
	UINT64_C(0xc24452da229b021c), UINT64_C(0xf2d56790ab41c2a3), UINT64_C(0x97c560ba6b0919a6), UINT64_C(0xbdb6b8e905cb600f),
	UINT64_C(0xed246723473e3813), UINT64_C(0x9436c0760c86e30c), UINT64_C(0xb94470938fa89bcf), UINT64_C(0xe7958cb87392c2c3),
	UINT64_C(0x90bd77f3483bb9ba), UINT64_C(0xb4ecd5f01a4aa828), UINT64_C(0xe2280b6c20dd5232), UINT64_C(0x8d590723948a535f),
	UINT64_C(0xb0af48ec79ace837), UINT64_C(0xdcdb1b2798182245), UINT64_C(0x8a08f0f8bf0f156b), UINT64_C(0xac8b2d36eed2dac6),
	UINT64_C(0xd7adf884aa879177), UINT64_C(0x86ccbb52ea94baeb), UINT64_C(0xa87fea27a539e9a5), UINT64_C(0xd29fe4b18e88640f),
	UINT64_C(0x83a3eeeef9153e89), UINT64_C(0xa48ceaaab75a8e2b), UINT64_C(0xcdb02555653131b6), UINT64_C(0x808e17555f3ebf12),
	UINT64_C(0xa0b19d2ab70e6ed6), UINT64_C(0xc8de047564d20a8c), UINT64_C(0xfb158592be068d2f), UINT64_C(0x9ced737bb6c4183d),
	UINT64_C(0xc428d05aa4751e4d), UINT64_C(0xf53304714d9265e0), UINT64_C(0x993fe2c6d07b7fac), UINT64_C(0xbf8fdb78849a5f97),
	UINT64_C(0xef73d256a5c0f77d), UINT64_C(0x95a8637627989aae), UINT64_C(0xbb127c53b17ec159), UINT64_C(0xe9d71b689dde71b0),
	UINT64_C(0x9226712162ab070e), UINT64_C(0xb6b00d69bb55c8d1), UINT64_C(0xe45c10c42a2b3b06), UINT64_C(0x8eb98a7a9a5b04e3),
	UINT64_C(0xb267ed1940f1c61c), UINT64_C(0xdf01e85f912e37a3), UINT64_C(0x8b61313bbabce2c6), UINT64_C(0xae397d8aa96c1b78),
	UINT64_C(0xd9c7dced53c72256), UINT64_C(0x881cea14545c7575), UINT64_C(0xaa242499697392d3), UINT64_C(0xd4ad2dbfc3d07788),
	UINT64_C(0x84ec3c97da624ab5), UINT64_C(0xa6274bbdd0fadd62), UINT64_C(0xcfb11ead453994ba), UINT64_C(0x81ceb32c4b43fcf5),
	UINT64_C(0xa2425ff75e14fc32), UINT64_C(0xcad2f7f5359a3b3e), UINT64_C(0xfd87b5f28300ca0e), UINT64_C(0x9e74d1b791e07e48),
	UINT64_C(0xc612062576589ddb), UINT64_C(0xf79687aed3eec551), UINT64_C(0x9abe14cd44753b53), UINT64_C(0xc16d9a0095928a27),
	UINT64_C(0xf1c90080baf72cb1), UINT64_C(0x971da05074da7bef), UINT64_C(0xbce5086492111aeb), UINT64_C(0xec1e4a7db69561a5),
	UINT64_C(0x9392ee8e921d5d07), UINT64_C(0xb877aa3236a4b449), UINT64_C(0xe69594bec44de15b), UINT64_C(0x901d7cf73ab0acd9),
	UINT64_C(0xb424dc35095cd80f), UINT64_C(0xe12e13424bb40e13), UINT64_C(0x8cbccc096f5088cc), UINT64_C(0xafebff0bcb24aaff),
	UINT64_C(0xdbe6fecebdedd5bf), UINT64_C(0x89705f4136b4a597), UINT64_C(0xabcc77118461cefd), UINT64_C(0xd6bf94d5e57a42bc),
	UINT64_C(0x8637bd05af6c69b6), UINT64_C(0xa7c5ac471b478423), UINT64_C(0xd1b71758e219652c), UINT64_C(0x83126e978d4fdf3b),
	UINT64_C(0xa3d70a3d70a3d70a), UINT64_C(0xcccccccccccccccd), UINT64_C(0x8000000000000000), UINT64_C(0xa000000000000000),
	UINT64_C(0xc800000000000000), UINT64_C(0xfa00000000000000), UINT64_C(0x9c40000000000000), UINT64_C(0xc350000000000000),
	UINT64_C(0xf424000000000000), UINT64_C(0x9896800000000000), UINT64_C(0xbebc200000000000), UINT64_C(0xee6b280000000000),
	UINT64_C(0x9502f90000000000), UINT64_C(0xba43b74000000000), UINT64_C(0xe8d4a51000000000), UINT64_C(0x9184e72a00000000),
	UINT64_C(0xb5e620f480000000), UINT64_C(0xe35fa931a0000000), UINT64_C(0x8e1bc9bf04000000), UINT64_C(0xb1a2bc2ec5000000),
	UINT64_C(0xde0b6b3a76400000), UINT64_C(0x8ac7230489e80000), UINT64_C(0xad78ebc5ac620000), UINT64_C(0xd8d726b7177a8000),
	UINT64_C(0x878678326eac9000), UINT64_C(0xa968163f0a57b400), UINT64_C(0xd3c21bcecceda100), UINT64_C(0x84595161401484a0),
	UINT64_C(0xa56fa5b99019a5c8), UINT64_C(0xcecb8f27f4200f3a), UINT64_C(0x813f3978f8940984), UINT64_C(0xa18f07d736b90be5),
	UINT64_C(0xc9f2c9cd04674edf), UINT64_C(0xfc6f7c4045812296), UINT64_C(0x9dc5ada82b70b59e), UINT64_C(0xc5371912364ce305),
	UINT64_C(0xf684df56c3e01bc7), UINT64_C(0x9a130b963a6c115c), UINT64_C(0xc097ce7bc90715b3), UINT64_C(0xf0bdc21abb48db20),
	UINT64_C(0x96769950b50d88f4), UINT64_C(0xbc143fa4e250eb31), UINT64_C(0xeb194f8e1ae525fd), UINT64_C(0x92efd1b8d0cf37be),
	UINT64_C(0xb7abc627050305ae), UINT64_C(0xe596b7b0c643c719), UINT64_C(0x8f7e32ce7bea5c70), UINT64_C(0xb35dbf821ae4f38c),
	UINT64_C(0xe0352f62a19e306f), UINT64_C(0x8c213d9da502de45), UINT64_C(0xaf298d050e4395d7), UINT64_C(0xdaf3f04651d47b4c),
	UINT64_C(0x88d8762bf324cd10), UINT64_C(0xab0e93b6efee0054), UINT64_C(0xd5d238a4abe98068), UINT64_C(0x85a36366eb71f041),
	UINT64_C(0xa70c3c40a64e6c52), UINT64_C(0xd0cf4b50cfe20766), UINT64_C(0x82818f1281ed44a0), UINT64_C(0xa321f2d7226895c8),
	UINT64_C(0xcbea6f8ceb02bb3a), UINT64_C(0xfee50b7025c36a08), UINT64_C(0x9f4f2726179a2245), UINT64_C(0xc722f0ef9d80aad6),
	UINT64_C(0xf8ebad2b84e0d58c), UINT64_C(0x9b934c3b330c8577), UINT64_C(0xc2781f49ffcfa6d5), UINT64_C(0xf316271c7fc3908b),
	UINT64_C(0x97edd871cfda3a57), UINT64_C(0xbde94e8e43d0c8ec), UINT64_C(0xed63a231d4c4fb27), UINT64_C(0x945e455f24fb1cf9),
	UINT64_C(0xb975d6b6ee39e437), UINT64_C(0xe7d34c64a9c85d44), UINT64_C(0x90e40fbeea1d3a4b), UINT64_C(0xb51d13aea4a488dd),
	UINT64_C(0xe264589a4dcdab15), UINT64_C(0x8d7eb76070a08aed), UINT64_C(0xb0de65388cc8ada8), UINT64_C(0xdd15fe86affad912),
	UINT64_C(0x8a2dbf142dfcc7ab), UINT64_C(0xacb92ed9397bf996), UINT64_C(0xd7e77a8f87daf7fc), UINT64_C(0x86f0ac99b4e8dafd),
	UINT64_C(0xa8acd7c0222311bd), UINT64_C(0xd2d80db02aabd62c), UINT64_C(0x83c7088e1aab65db), UINT64_C(0xa4b8cab1a1563f52),
	UINT64_C(0xcde6fd5e09abcf27), UINT64_C(0x80b05e5ac60b6178), UINT64_C(0xa0dc75f1778e39d6), UINT64_C(0xc913936dd571c84c),
	UINT64_C(0xfb5878494ace3a5f), UINT64_C(0x9d174b2dcec0e47b), UINT64_C(0xc45d1df942711d9a), UINT64_C(0xf5746577930d6501),
	UINT64_C(0x9968bf6abbe85f20), UINT64_C(0xbfc2ef456ae276e9), UINT64_C(0xefb3ab16c59b14a3), UINT64_C(0x95d04aee3b80ece6),
	UINT64_C(0xbb445da9ca61281f), UINT64_C(0xea1575143cf97227), UINT64_C(0x924d692ca61be758), UINT64_C(0xb6e0c377cfa2e12e),
	UINT64_C(0xe498f455c38b997a), UINT64_C(0x8edf98b59a373fec), UINT64_C(0xb2977ee300c50fe7), UINT64_C(0xdf3d5e9bc0f653e1),
	UINT64_C(0x8b865b215899f46d), UINT64_C(0xae67f1e9aec07188), UINT64_C(0xda01ee641a708dea), UINT64_C(0x884134fe908658b2),
	UINT64_C(0xaa51823e34a7eedf), UINT64_C(0xd4e5e2cdc1d1ea96), UINT64_C(0x850fadc09923329e), UINT64_C(0xa6539930bf6bff46),
	UINT64_C(0xcfe87f7cef46ff17), UINT64_C(0x81f14fae158c5f6e), UINT64_C(0xa26da3999aef774a), UINT64_C(0xcb090c8001ab551c),
	UINT64_C(0xfdcb4fa002162a63), UINT64_C(0x9e9f11c4014dda7e), UINT64_C(0xc646d63501a1511e), UINT64_C(0xf7d88bc24209a565),
	UINT64_C(0x9ae757596946075f), UINT64_C(0xc1a12d2fc3978937), UINT64_C(0xf209787bb47d6b85), UINT64_C(0x9745eb4d50ce6333),
	UINT64_C(0xbd176620a501fc00), UINT64_C(0xec5d3fa8ce427b00), UINT64_C(0x93ba47c980e98ce0), UINT64_C(0xb8a8d9bbe123f018),
	UINT64_C(0xe6d3102ad96cec1e), UINT64_C(0x9043ea1ac7e41393), UINT64_C(0xb454e4a179dd1877), UINT64_C(0xe16a1dc9d8545e95),
	UINT64_C(0x8ce2529e2734bb1d), UINT64_C(0xb01ae745b101e9e4), UINT64_C(0xdc21a1171d42645d), UINT64_C(0x899504ae72497eba),
	UINT64_C(0xabfa45da0edbde69), UINT64_C(0xd6f8d7509292d603), UINT64_C(0x865b86925b9bc5c2), UINT64_C(0xa7f26836f282b733),
	UINT64_C(0xd1ef0244af2364ff), UINT64_C(0x8335616aed761f1f), UINT64_C(0xa402b9c5a8d3a6e7), UINT64_C(0xcd036837130890a1),
	UINT64_C(0x802221226be55a65), UINT64_C(0xa02aa96b06deb0fe), UINT64_C(0xc83553c5c8965d3d), UINT64_C(0xfa42a8b73abbf48d),
	UINT64_C(0x9c69a97284b578d8), UINT64_C(0xc38413cf25e2d70e), UINT64_C(0xf46518c2ef5b8cd1), UINT64_C(0x98bf2f79d5993803),
	UINT64_C(0xbeeefb584aff8604), UINT64_C(0xeeaaba2e5dbf6785), UINT64_C(0x952ab45cfa97a0b3), UINT64_C(0xba756174393d88e0),
	UINT64_C(0xe912b9d1478ceb17), UINT64_C(0x91abb422ccb812ef), UINT64_C(0xb616a12b7fe617aa), UINT64_C(0xe39c49765fdf9d95),
	UINT64_C(0x8e41ade9fbebc27d), UINT64_C(0xb1d219647ae6b31c), UINT64_C(0xde469fbd99a05fe3), UINT64_C(0x8aec23d680043bee),
	UINT64_C(0xada72ccc20054aea), UINT64_C(0xd910f7ff28069da4), UINT64_C(0x87aa9aff79042287), UINT64_C(0xa99541bf57452b28),
	UINT64_C(0xd3fa922f2d1675f2), UINT64_C(0x847c9b5d7c2e09b7), UINT64_C(0xa59bc234db398c25), UINT64_C(0xcf02b2c21207ef2f),
	UINT64_C(0x8161afb94b44f57d), UINT64_C(0xa1ba1ba79e1632dc), UINT64_C(0xca28a291859bbf93), UINT64_C(0xfcb2cb35e702af78),
	UINT64_C(0x9defbf01b061adab), UINT64_C(0xc56baec21c7a1916), UINT64_C(0xf6c69a72a3989f5c), UINT64_C(0x9a3c2087a63f6399),
	UINT64_C(0xc0cb28a98fcf3c80), UINT64_C(0xf0fdf2d3f3c30b9f), UINT64_C(0x969eb7c47859e744), UINT64_C(0xbc4665b596706115),
	UINT64_C(0xeb57ff22fc0c795a), UINT64_C(0x9316ff75dd87cbd8), UINT64_C(0xb7dcbf5354e9bece), UINT64_C(0xe5d3ef282a242e82),
	UINT64_C(0x8fa475791a569d11), UINT64_C(0xb38d92d760ec4455), UINT64_C(0xe070f78d3927556b), UINT64_C(0x8c469ab843b89563),
	UINT64_C(0xaf58416654a6babb), UINT64_C(0xdb2e51bfe9d0696a), UINT64_C(0x88fcf317f22241e2), UINT64_C(0xab3c2fddeeaad25b),
	UINT64_C(0xd60b3bd56a5586f2), UINT64_C(0x85c7056562757457), UINT64_C(0xa738c6bebb12d16d), UINT64_C(0xd106f86e69d785c8),
	UINT64_C(0x82a45b450226b39d), UINT64_C(0xa34d721642b06084), UINT64_C(0xcc20ce9bd35c78a5), UINT64_C(0xff290242c83396ce),
	UINT64_C(0x9f79a169bd203e41), UINT64_C(0xc75809c42c684dd1), UINT64_C(0xf92e0c3537826146), UINT64_C(0x9bbcc7a142b17ccc),
	UINT64_C(0xc2abf989935ddbfe), UINT64_C(0xf356f7ebf83552fe), UINT64_C(0x98165af37b2153df), UINT64_C(0xbe1bf1b059e9a8d6),
	UINT64_C(0xeda2ee1c7064130c), UINT64_C(0x9485d4d1c63e8be8), UINT64_C(0xb9a74a0637ce2ee1), UINT64_C(0xe8111c87c5c1ba9a),
	UINT64_C(0x910ab1d4db9914a0), UINT64_C(0xb54d5e4a127f59c8), UINT64_C(0xe2a0b5dc971f303a), UINT64_C(0x8da471a9de737e24),
	UINT64_C(0xb10d8e1456105dad), UINT64_C(0xdd50f1996b947519), UINT64_C(0x8a5296ffe33cc930), UINT64_C(0xace73cbfdc0bfb7b),
	UINT64_C(0xd8210befd30efa5a), UINT64_C(0x8714a775e3e95c78), UINT64_C(0xa8d9d1535ce3b396), UINT64_C(0xd31045a8341ca07c),
	UINT64_C(0x83ea2b892091e44e), UINT64_C(0xa4e4b66b68b65d61), UINT64_C(0xce1de40642e3f4b9), UINT64_C(0x80d2ae83e9ce78f4),
	UINT64_C(0xa1075a24e4421731), UINT64_C(0xc94930ae1d529cfd), UINT64_C(0xfb9b7cd9a4a7443c), UINT64_C(0x9d412e0806e88aa6),
	UINT64_C(0xc491798a08a2ad4f), UINT64_C(0xf5b5d7ec8acb58a3), UINT64_C(0x9991a6f3d6bf1766), UINT64_C(0xbff610b0cc6edd3f),
	UINT64_C(0xeff394dcff8a948f), UINT64_C(0x95f83d0a1fb69cd9), UINT64_C(0xbb764c4ca7a44410), UINT64_C(0xea53df5fd18d5514),
	UINT64_C(0x92746b9be2f8552c), UINT64_C(0xb7118682dbb66a77), UINT64_C(0xe4d5e82392a40515), UINT64_C(0x8f05b1163ba6832d),
	UINT64_C(0xb2c71d5bca9023f8), UINT64_C(0xdf78e4b2bd342cf7), UINT64_C(0x8bab8eefb6409c1a), UINT64_C(0xae9672aba3d0c321),
	UINT64_C(0xda3c0f568cc4f3e9), UINT64_C(0x8865899617fb1871), UINT64_C(0xaa7eebfb9df9de8e), UINT64_C(0xd51ea6fa85785631),
	UINT64_C(0x8533285c936b35df), UINT64_C(0xa67ff273b8460357), UINT64_C(0xd01fef10a657842c), UINT64_C(0x8213f56a67f6b29c),
	UINT64_C(0xa298f2c501f45f43), UINT64_C(0xcb3f2f7642717713), UINT64_C(0xfe0efb53d30dd4d8), UINT64_C(0x9ec95d1463e8a507),
	UINT64_C(0xc67bb4597ce2ce49), UINT64_C(0xf81aa16fdc1b81db), UINT64_C(0x9b10a4e5e9913129), UINT64_C(0xc1d4ce1f63f57d73),
	UINT64_C(0xf24a01a73cf2dcd0), UINT64_C(0x976e41088617ca02), UINT64_C(0xbd49d14aa79dbc82), UINT64_C(0xec9c459d51852ba3),
	UINT64_C(0x93e1ab8252f33b46), UINT64_C(0xb8da1662e7b00a17), UINT64_C(0xe7109bfba19c0c9d), UINT64_C(0x906a617d450187e2),
	UINT64_C(0xb484f9dc9641e9db), UINT64_C(0xe1a63853bbd26451), UINT64_C(0x8d07e33455637eb3), UINT64_C(0xb049dc016abc5e60),
	UINT64_C(0xdc5c5301c56b75f7), UINT64_C(0x89b9b3e11b6329bb), UINT64_C(0xac2820d9623bf429), UINT64_C(0xd732290fbacaf134),
	UINT64_C(0x867f59a9d4bed6c0), UINT64_C(0xa81f301449ee8c70), UINT64_C(0xd226fc195c6a2f8c), UINT64_C(0x83585d8fd9c25db8),
	UINT64_C(0xa42e74f3d032f526),
};

constexpr uint64_t LUT_POW10[20] = {
	UINT64_C(0x0000000000000001), UINT64_C(0x000000000000000a), UINT64_C(0x0000000000000064), UINT64_C(0x00000000000003e8),
	UINT64_C(0x0000000000002710), UINT64_C(0x00000000000186a0), UINT64_C(0x00000000000f4240), UINT64_C(0x0000000000989680),
	UINT64_C(0x0000000005f5e100), UINT64_C(0x000000003b9aca00), UINT64_C(0x00000002540be400), UINT64_C(0x000000174876e800),
	UINT64_C(0x000000e8d4a51000), UINT64_C(0x000009184e72a000), UINT64_C(0x00005af3107a4000), UINT64_C(0x00038d7ea4c68000),
	UINT64_C(0x002386f26fc10000), UINT64_C(0x016345785d8a0000), UINT64_C(0x0de0b6b3a7640000), UINT64_C(0x8ac7230489e80000),
};

Decimal ToDecimal(double value, uint32_t precision) {
	assert(precision >= 2 && precision <= 18);
	Decimal dec;

	// split into sign, mantissa and exponent (still base 2)
	uint64_t mem = MemCast<uint64_t>(value);
	dec.negative = mem >> 63;
	uint32_t expo2_raw = (mem >> 52) & (((uint64_t) 1 << 11) - 1);
	uint64_t mant2_raw = mem & (((uint64_t) 1 << 52) - 1);

	// check for special cases
	uint32_t expo2_biased = expo2_raw;
	if(expo2_raw == 0) {
		if(mant2_raw == 0) {
			dec.type = FLOATTYPE_NORMAL;
			dec.expo = 0;
			dec.mant = 0;
			return dec;
		} else {
			dec.type = FLOATTYPE_NORMAL;
			expo2_biased = 1; // subnormal
		}
	} else if(expo2_raw == 2047) {
		if(mant2_raw == 0) {
			dec.type = FLOATTYPE_INF;
			return dec;
		} else {
			dec.type = FLOATTYPE_NAN;
			return dec;
		}
	} else {
		dec.type = FLOATTYPE_NORMAL;
		mant2_raw |= (uint64_t) 1 << 52; // add the implicit '1' bit
	}

	// Convert to base 10 using the lookup tables. The exponent is approximated and will be corrected later.
	// The initial exponent may be too low, but it is never too high. As a result the initial mantissa will be
	// approximately in the range 1.1125 .. 22.2507. This means that one extra division by 10 may be needed later.
	// expo10 = (expo2 - 1023) * log10(2) + 308
	//        = expo2 * log10(2) - 1023 * log10(2) + 308
	//        = expo2 * 0.3010299956639812 + 0.046314435747206062
	// mant10 = mant2 * 2**(expo2 - 1023 - 52) / 10**(expo10 - 308 - 17)
	//        = mant2 * (2**expo2 * 10**(308 + 17)) / (2**(1023 + 52) * 10**expo10)
	// The multiplier lookup table is scaled up by a factor 8 to improve the accuracy.
	// We intentionally round down (floor) to compensate for the 0.5 LSB positive bias of the final division.
	uint32_t expo10_biased = (expo2_biased * 315652) >> 20;
	uint32_t shift = LUT_TODECIMAL_EXPO[expo10_biased] - expo2_biased;
	uint64_t mult = LUT_TODECIMAL_MULT[expo10_biased];
	assert(shift != 0);
	dec.mant = FixMul64F(mant2_raw << (12 - shift), mult);
	dec.expo = (int32_t) expo10_biased - 308;

	// deal with subnormals
	if(expo2_raw == 0) {
		assert(dec.mant != 0);
		// TODO: optimize
		while(dec.mant < UINT64_C(800000000000000000)) {
			dec.mant *= 10;
			--dec.expo;
		}
	}

	// convert to desired number of decimals
	uint32_t decimals = precision - 1;
	dec.expo -= (int32_t) decimals;
	uint64_t div = LUT_TODECIMAL_DIV[decimals];
	if(dec.mant + div / 2 >= UINT64_C(8000000000000000000)) {
		div = LUT_TODECIMAL_DIV[decimals - 1];
		++dec.expo;
	}
	dec.mant = (dec.mant + div / 2) / div;
	assert(dec.mant >= LUT_POW10[decimals]);
	assert(dec.mant < LUT_POW10[decimals + 1]);

	return dec;
}

double FromDecimal(Decimal dec) {
	switch(dec.type) {
		case FLOATTYPE_NORMAL: {

			// extract values
			assert(dec.mant <= DECIMAL_MANT_MAX);
			if(dec.mant == 0) {
				return (dec.negative)? FLOAT_ZERO_NEG : FLOAT_ZERO_POS;
			}

			// check if the exponent is too low
			if(dec.expo < -308 - 18) {
				uint32_t shift = -308 - 18 - dec.expo;
				if(shift > 19) {
					return (dec.negative)? FLOAT_ZERO_NEG : FLOAT_ZERO_POS;
				}
				uint64_t div = LUT_POW10[shift];
				dec.mant = (dec.mant + div / 2) / div;
				dec.expo = -308 - 18;
			} else {
				// shift mantissa up until it reaches the maximum or until the exponent reaches the minimum
				// TODO: (((is in the range 10**18 .. 10**19-1)))
				// TODO: optimize
				while(dec.expo > -308 - 18 && dec.mant <= DECIMAL_MANT_MAX / 10) {
					dec.mant *= 10;
					--dec.expo;
				}
				if(dec.expo > 308 - 18) {
					return (dec.negative)? FLOAT_INF_NEG : FLOAT_INF_POS;
				}
			}

			// Convert to base 2 using the lookup tables. The exponent is approximated and will be corrected later.
			// The multiplier lookup table is scaled up by a factor 2**7 to improve the accuracy.
			// We intentionally round down (floor) to compensate for the 0.5 LSB positive bias of the final division.
			uint32_t expo10_biased = dec.expo + 308 + 18;
			uint32_t expo2_biased = LUT_FROMDECIMAL_EXPO[expo10_biased];
			uint64_t mult = LUT_FROMDECIMAL_MULT[expo10_biased];
			uint64_t mant2 = FixMul64F(dec.mant, mult);

			// calculate shift
			uint32_t bittest = mant2 >> 59;
			uint32_t shift = 0;
			if(bittest >= ((uint32_t) 1 << 4)) { shift +=  4; bittest >>=  4; }
			if(bittest >= ((uint32_t) 1 << 2)) { shift +=  2; bittest >>=  2; }
			if(bittest >= ((uint32_t) 1 << 1)) { shift +=  1; }
			assert(shift <= 4);

			// adjust mantissa
			uint64_t temp = (mant2 + ((uint64_t) 1 << (shift + 6))) >> (shift + 7);
			if(temp < ((uint64_t) 1 << 53)) {
				mant2 = temp;
			} else {
				++shift;
				mant2 = (mant2 + ((uint64_t) 1 << (shift + 6))) >> (shift + 7);
			}
			assert(shift <= 4);
			assert(mant2 < ((uint64_t) 1 << 53));

			// adjust exponent
			expo2_biased += shift;
			if(expo2_biased > 2046) {
				return (dec.negative)? FLOAT_INF_NEG : FLOAT_INF_POS;
			}

			// convert to floating point
			uint64_t mem;
			if(mant2 < ((uint64_t) 1 << 52)) {
				assert(expo2_biased == 1);
				mem = mant2;
			} else {
				assert(expo2_biased >= 1);
				assert(expo2_biased <= 2046);
				mem = ((uint64_t) expo2_biased << 52) | (mant2 & (((uint64_t) 1 << 52) - 1));
			}
			if(dec.negative) {
				mem |= (uint64_t) 1 << 63;
			}

			return MemCast<double>(mem);
		}
		case FLOATTYPE_INF: {
			return (dec.negative)? FLOAT_INF_NEG : FLOAT_INF_POS;
		}
		case FLOATTYPE_NAN: {
			return FLOAT_NAN;
		}
	}
	// this should never be reached
	assert(false);
	return FLOAT_NAN;
}
